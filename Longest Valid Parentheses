// Using DP
int longestValidParentheses(string s) {
    int n = s.size(), len = 0;
    
    vector<int> dp(n); // dp[i] = longest valid parentheses ending at index i
    dp[0] = 0;
    
    for(int i = 1;i < n;i++) {
        if(s[i] == '(') {
            dp[i] = 0;
        } else {
            if(s[i - 1] == '(') {
                dp[i] = (i >= 2 ? dp[i - 2] : 0) + 2;
            } else {
                int idx = i - dp[i - 1] - 1;
                if (idx >= 0 && s[idx] == '(') {
                    dp[i] = (idx >= 1 ? dp[idx - 1] : 0) + dp[i - 1] + 2;
                } else {
                    dp[i] = 0;
                }
            }
        }

        len = max(len, dp[i]);
    }

    return len;
}




// Using Stack
#include<bits/stdc++.h>
int longestValidParentheses(string s) {
    int n = s.size(), len = 0;
    stack<int> st; st.push(-1);

    for(int i = 0;i < n;i++) {
        if(s[i] == '(') {
            st.push(i);
        } else {
            if(st.top() == -1 || s[st.top()] == ')') {
                st.push(i);
            } else {
                st.pop();
                len = max(len, i - st.top());
            }
        }
    }

    return len;

}
