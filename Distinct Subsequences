// First Method
#include <bits/stdc++.h> 
int distinctSubsequences(string str) 
{
    int n = str.size();
    vector<long> dp(n + 1); // dp[i] = count of Unique subsequences in the prefix of length i
    map<int, int> prevOcc; // stores the idx of prev occ of each char

    dp[0] = 1;
    for(int i = 1;i <= n;i++) {
        dp[i] = (2 * dp[i - 1]) % 1000000007;
        if(prevOcc.find(str[i - 1]) != prevOcc.end()) {
            int idx = prevOcc[str[i - 1]];
            dp[i] = ((dp[i] - dp[idx - 1]) % 1000000007 + 1000000007) % 1000000007;
        }

        prevOcc[str[i - 1]] = i;
    }  

    return dp[n];
}
// Second Method
#include <bits/stdc++.h> 
int distinctSubsequences(string S) 
{
    map<char, long> arr; // count of Unique subsequences ending at char ch
    long totUnique = 1;
    for(auto ch : S) {
        long curr = ((totUnique - arr[ch]) % 1000000007 + 1000000007) % 1000000007; // non - repeating unique subsequence ending at char ch 
        totUnique = (totUnique + curr) % 1000000007;
        arr[ch] = (arr[ch] + curr) % 1000000007; // tot unique subsequences ending at char ch
    }
    return totUnique;
}
