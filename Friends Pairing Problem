// Recursive Appraoch
#include <bits/stdc++.h> 
map<int, int> mp;
int numberOfWays(int n)
{ 
    if(n == 0 || n == 1) return 1;
    if(mp.find(n) != mp.end()) return mp[n]; 
    return mp[n] = (numberOfWays(n - 1) + ((n - 1LL) * numberOfWays(n - 2))%1000000007) % 1000000007;
}

// Tabulation
#include <bits/stdc++.h> 
int numberOfWays(int n)
{
    vector<int> dp(n + 1);
    dp[0] = dp[1] = 1;
    
    for(int i = 2;i <= n;i++) {
        dp[i] = (dp[i - 1] + ((i - 1LL) * dp[i - 2]) % 1000000007) % 1000000007;
    }

    return dp[n];
}

// Optimized - O(1) Space
#include <bits/stdc++.h> 
int numberOfWays(int n)
{
    if(n == 0 || n == 1) return 1;

    int im1val = 1; // dp's (i - 1)th val
    int im2val = 1; // dp's (i - 2)th val
    
    for(int i = 2;i <= n;i++) {
        int ival = (im1val + ((i - 1LL) * im2val) % 1000000007) % 1000000007; //dp's ith val
        im2val = im1val;
        im1val = ival;
    }
    return im1val;
}
