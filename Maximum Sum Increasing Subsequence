// Recursive Approach
#include <bits/stdc++.h>
vector<int> dp;
int maxIncreasingDumbbellsSum2(int idx, vector<int>& rack, int& res) {
	int maxSum = rack[idx];
	if(dp[idx] != -1) return dp[idx];
	for(int i = 0;i < idx;i++) {
		int maxSum2 = maxIncreasingDumbbellsSum2(i, rack, res) + rack[idx];
		if(rack[i] < rack[idx]) {
			maxSum = max(maxSum, maxSum2);
		}
	}

	res = max(res, maxSum);

	return dp[idx] = maxSum;
}
int maxIncreasingDumbbellsSum(vector<int> &rack, int n)
{
	dp = vector<int>(n, -1);
	int res = 0;
	maxIncreasingDumbbellsSum2(n - 1, rack, res);
	return res;
}




//Tabulation
#include <bits/stdc++.h> 
int maxIncreasingDumbbellsSum(vector<int> &rack, int n)
{
	int res = 0;
	vector<int> dp(n); // dp[i] = maxSum if last choosen dumbbell is ith one
	
	for(int i = 0;i < n;i++) {
		dp[i] = rack[i];

		for(int j = 0;j < i;j++) {
			if(rack[j] < rack[i]) {
				dp[i] = max(dp[i], dp[j] + rack[i]);
			}
		}

		res = max(res, dp[i]);
	}

	return res;
}
