int findMinFountains(vector<int> &arr, int n)
{
    vector<pair<int, int>> vec;
    for(int i = 0;i <= n;i++) {
        vec.push_back({max(0, i - arr[i]), i + arr[i]});
    }

    sort(vec.begin(), vec.end(), [](pair<int, int> &a, pair<int, int> &b) {
        return a.first < b.first || (a.first == b.first && a.second > b.second);
    });

    int fountainCount = 1;
    int currmaxpos = vec[0].second;
    int maxpos = vec[0].second;

    for(int i = 1;i <= n;i++) {
        if(vec[i].first > currmaxpos) {
            if(currmaxpos == maxpos) return -1;
            fountainCount++;
            currmaxpos = maxpos;
        }
        maxpos = max(maxpos, vec[i].second);    
    }
    if(currmaxpos < n) return fountainCount + 1;
    return fountainCount;
}
